{
open FSharp.Text.Lexing

let newline (lexbuf : LexBuffer<_>) =
    lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

// Regular expressions
let whitespace = [' ' '\t']
let newline    = ('\n' | '\r' '\n')
let letter     = ['a'-'z' 'A'-'Z']
let digit      = ['0'-'9']
let int        = '-'?digit+
let name       = letter (letter | digit)*

// Rules for reading tokens
rule tokenstream = parse
  | whitespace { tokenstream lexbuf (* Read more characters *) }
  | newline    { newline lexbuf;
                 tokenstream lexbuf (* Read more characters *) }
  | int        { Parser.INT(int(LexBuffer<_>.LexemeString lexbuf)) }
  | '('        { Parser.LPAR  }
  | ')'        { Parser.RPAR  }
  | '+'        { Parser.PLUS }
  | '-'        { Parser.MINUS }
  | '*'        { Parser.STAR }
  | '%'        { Parser.MOD }
  | '/'        { Parser.DIV }
  | '^'        { Parser.HAT }
  | "write"    { Parser.WRITE }
  | "read"     { Parser.READ }
  | "=="       { Parser.EQ }
  | "!="       { Parser.NEQ }
  | '<'        { Parser.LT }
  | '>'        { Parser.GT }
  | "<="       { Parser.LTEQ }
  | ">="       { Parser.GTEQ }
  | "&&"       { Parser.AND }
  | "||"       { Parser.OR }
  | "if"       { Parser.IF }
  | "then"     { Parser.THEN }
  | "else"     { Parser.ELSE }
  | "let"      { Parser.LET }
  | "in"       { Parser.IN }
  | "fun"      { Parser.FUNC }
  | '='        { Parser.DEF }
  | ';'        { Parser.SEMICOL }
  | ','        { Parser.COMMA }
  | eof        { Parser.EOF }
  | name       { Parser.NAME(LexBuffer<_>.LexemeString lexbuf) }
  | _          { failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
