// Signature file for parser generated by fsyacc
module Parser
type token = 
  | COMMA
  | EOF
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | AND
  | OR
  | PLUS
  | MINUS
  | STAR
  | LPAR
  | RPAR
  | HAT
  | DIV
  | MOD
  | SEMICOL
  | WRITE
  | READ
  | LET
  | DEF
  | FUNC
  | IN
  | IF
  | THEN
  | ELSE
  | NAME of (string)
  | INT of (int)
type tokenId = 
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LTEQ
    | TOKEN_GTEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_HAT
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_SEMICOL
    | TOKEN_WRITE
    | TOKEN_READ
    | TOKEN_LET
    | TOKEN_DEF
    | TOKEN_FUNC
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_NAME
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_FDS
    | NONTERM_funcDef
    | NONTERM_NO_NAME_OR_MORE
    | NONTERM_NAME_OR_MORE
    | NONTERM_EXPS
    | NONTERM_exp
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ((Syntax.funcDef list * Syntax.exp)) 
