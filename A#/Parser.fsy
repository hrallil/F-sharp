%{
%}

// The start symbol (or non-terminal):
%start start

// Names of tokens (or terminals):
%token <int> INT
%token <string> NAME
%token LET DEF FUNC IN IF THEN ELSE
%token PLUS MINUS STAR LPAR RPAR HAT DIV
%token EQ
%token EOF


// Associativity and precedence:
%left PLUS MINUS
%left STAR
%right HAT
%left DIV

// Declaring the types of the values produced by the different
// symbols:
%type <Syntax.exp> start
%type <Syntax.exp> exp

%%

// Grammar rules along with the F# code to execute when they are
// reduced:
start
  : exp EOF                   { $1 }

exp
  : INT                       { Syntax.INT $1 }
  | LPAR exp RPAR             { $2 }
  | NAME                      { Syntax.VAR $1 }
  | LET NAME DEF exp IN exp   { Syntax.LET($2, $4, $6) }  // Interpreter.evalProg ([],  (Parse.fromString("let x = 5 in 2 + x")));;  does not work
  | exp PLUS exp              { Syntax.ADD($1, $3) }
  | exp MINUS exp             { Syntax.SUB($1, $3) }
  | exp STAR exp              { Syntax.MUL($1, $3) }
  | exp HAT exp               { Syntax.EXP($1, $3) }
  | exp EQ exp                { Syntax.EQ ($1, $3) }
  | exp DIV exp               { Syntax.DIV($1, $3) }
  | IF exp THEN exp ELSE exp  { Syntax.IF ($2, $4, $6) }
  // | exp LN exp                { $3 }
  // | CMNT_S exp CMNT_S         {}
  | FUNC NAME exp DEF exp     { Syntax.funcDef($2, $3, $5) }
  | CALL                      {}
